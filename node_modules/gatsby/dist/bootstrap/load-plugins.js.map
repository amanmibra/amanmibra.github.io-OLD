{"version":3,"sources":["../../src/bootstrap/load-plugins.js"],"names":["_","require","slash","fs","path","crypto","glob","store","nodeAPIs","testRequireError","report","resolvePluginModule","plugin","moduleName","resolved","resolve","err","panic","getBadExports","pluginAPIKeys","apis","badExports","concat","difference","map","exportName","e","pluginName","name","pluginVersion","version","getBadExportsMessage","exportType","stripIndent","stringSimiliarity","capitalized","toUpperCase","slice","message","forEach","similarities","findBestMatch","bady","bestMatch","rating","target","createFileContentHash","root","globPattern","hash","createHash","files","sync","nodir","update","readFileSync","filepath","digest","resolvePlugin","existsSync","resolvedPath","packageJSON","JSON","parse","id","Error","dirname","module","exports","config","plugins","processPlugin","isString","info","pluginOptions","subplugins","options","push","p","merge","join","__dirname","process","cwd","flattenedPlugins","extractPlugins","subPlugin","keys","apiToPlugins","reduce","acc","value","node","browser","ssr","browserAPIs","ssrAPIs","gatsbyNode","gatsbyBrowser","gatsbySSR","gatsbyNodeKeys","intersection","nodeAPI","gatsbyBrowserKeys","browserAPI","gatsbySSRKeys","ssrAPI","bad","toPairs","entries","length","console","log","exit","dispatch","type","payload"],"mappings":"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","file":"load-plugins.js","sourcesContent":["const _ = require(`lodash`)\nconst slash = require(`slash`)\nconst fs = require(`fs`)\nconst path = require(`path`)\nconst crypto = require(`crypto`)\nconst glob = require(`glob`)\n\nconst { store } = require(`../redux`)\nconst nodeAPIs = require(`../utils/api-node-docs`)\nconst testRequireError = require(`../utils/test-require-error`)\nconst report = require(`gatsby-cli/lib/reporter`)\n\n// Given a plugin object and a moduleName like `gatsby-node`, check that the\n// path to moduleName can be resolved.\nconst resolvePluginModule = (plugin, moduleName) => {\n  let resolved = false\n  try {\n    resolved = require(`${plugin.resolve}/${moduleName}`)\n  } catch (err) {\n    if (!testRequireError(moduleName, err)) {\n      // ignore\n    } else {\n      report.panic(`Error requiring ${plugin.resolve}/${moduleName}.js`, err)\n    }\n  }\n  return resolved\n}\n\n// Given a plugin object, an array of the API names it exports and an\n// array of valid API names, return an array of invalid API exports.\nconst getBadExports = (plugin, pluginAPIKeys, apis) => {\n  let badExports = []\n  // Discover any exports from plugins which are not \"known\"\n  badExports = badExports.concat(\n    _.difference(pluginAPIKeys, apis).map(e => {\n      return {\n        exportName: e,\n        pluginName: plugin.name,\n        pluginVersion: plugin.version,\n      }\n    })\n  )\n  return badExports\n}\n\nconst getBadExportsMessage = (badExports, exportType, apis) => {\n  const { stripIndent } = require(`common-tags`)\n  const stringSimiliarity = require(`string-similarity`)\n  let capitalized = `${exportType[0].toUpperCase()}${exportType.slice(1)}`\n  if (capitalized === `Ssr`) capitalized = `SSR`\n\n  let message = `\\n`\n  message += stripIndent`\n    Your plugins must export known APIs from their gatsby-${exportType}.js.\n    The following exports aren't APIs. Perhaps you made a typo or\n    your plugin is outdated?\n\n    See https://www.gatsbyjs.org/docs/${exportType}-apis/ for the list of Gatsby ${capitalized} APIs`\n\n  badExports.forEach(bady => {\n    const similarities = stringSimiliarity.findBestMatch(\n      bady.exportName,\n      apis\n    )\n    message += `\\n — `\n    if (bady.pluginName == `default-site-plugin`) {\n      message += `Your site's gatsby-${exportType}.js is exporting a variable named \"${\n        bady.exportName\n      }\" which isn't an API.`\n    } else {\n      message += `The plugin \"${bady.pluginName}@${\n        bady.pluginVersion\n      }\" is exporting a variable named \"${\n        bady.exportName\n      }\" which isn't an API.`\n    }\n    if (similarities.bestMatch.rating > 0.5) {\n      message += ` Perhaps you meant to export \"${\n        similarities.bestMatch.target\n      }\"?`\n    }\n  })\n\n  return message\n}\n\nfunction createFileContentHash(root, globPattern) {\n  const hash = crypto.createHash(`md5`)\n  const files = glob.sync(`${root}/${globPattern}`, { nodir: true })\n\n  files.forEach(filepath => {\n    hash.update(fs.readFileSync(filepath))\n  })\n\n  return hash.digest(`hex`)\n}\n\n/**\n * @typedef {Object} PluginInfo\n * @property {string} resolve The absolute path to the plugin\n * @property {string} name The plugin name\n * @property {string} version The plugin version (can be content hash)\n */\n\n/**\n * resolvePlugin\n * @param {string} pluginName\n * This can be a name of a local plugin, the name of a plugin located in\n * node_modules, or a Gatsby internal plugin. In the last case the pluginName\n * will be an absolute path.\n * @return {PluginInfo}\n */\nfunction resolvePlugin(pluginName) {\n  // Only find plugins when we're not given an absolute path\n  if (!fs.existsSync(pluginName)) {\n    // Find the plugin in the local plugins folder\n    const resolvedPath = slash(path.resolve(`./plugins/${pluginName}`))\n\n    if (fs.existsSync(resolvedPath)) {\n      if (fs.existsSync(`${resolvedPath}/package.json`)) {\n        const packageJSON = JSON.parse(\n          fs.readFileSync(`${resolvedPath}/package.json`, `utf-8`)\n        )\n\n        return {\n          resolve: resolvedPath,\n          name: packageJSON.name || pluginName,\n          id: `Plugin ${packageJSON.name || pluginName}`,\n          version:\n            packageJSON.version || createFileContentHash(resolvedPath, `**`),\n        }\n      } else {\n        // Make package.json a requirement for local plugins too\n        throw new Error(`Plugin ${pluginName} requires a package.json file`)\n      }\n    }\n  }\n\n  /**\n   * Here we have an absolute path to an internal plugin, or a name of a module\n   * which should be located in node_modules.\n   */\n  try {\n    const resolvedPath = slash(path.dirname(require.resolve(pluginName)))\n\n    const packageJSON = JSON.parse(\n      fs.readFileSync(`${resolvedPath}/package.json`, `utf-8`)\n    )\n\n    return {\n      resolve: resolvedPath,\n      id: `Plugin ${packageJSON.name}`,\n      name: packageJSON.name,\n      version: packageJSON.version,\n    }\n  } catch (err) {\n    throw new Error(`Unable to find plugin \"${pluginName}\"`)\n  }\n}\n\nmodule.exports = async (config = {}) => {\n  // Instantiate plugins.\n  const plugins = []\n\n  // Create fake little site with a plugin for testing this\n  // w/ snapshots. Move plugin processing to its own module.\n  // Also test adding to redux store.\n  const processPlugin = plugin => {\n    if (_.isString(plugin)) {\n      const info = resolvePlugin(plugin)\n\n      return {\n        ...info,\n        pluginOptions: {\n          plugins: [],\n        },\n      }\n    } else {\n      // Plugins can have plugins.\n      const subplugins = []\n      if (plugin.options && plugin.options.plugins) {\n        plugin.options.plugins.forEach(p => {\n          subplugins.push(processPlugin(p))\n        })\n\n        plugin.options.plugins = subplugins\n      }\n\n      // Add some default values for tests as we don't actually\n      // want to try to load anything during tests.\n      if (plugin.resolve === `___TEST___`) {\n        return {\n          name: `TEST`,\n          pluginOptions: {\n            plugins: [],\n          },\n        }\n      }\n\n      const info = resolvePlugin(plugin.resolve)\n\n      return {\n        ...info,\n        pluginOptions: _.merge({ plugins: [] }, plugin.options),\n      }\n    }\n  }\n\n  // Add internal plugins\n  plugins.push(\n    processPlugin(path.join(__dirname, `../internal-plugins/dev-404-page`))\n  )\n  plugins.push(\n    processPlugin(\n      path.join(__dirname, `../internal-plugins/component-page-creator`)\n    )\n  )\n  plugins.push(\n    processPlugin(\n      path.join(__dirname, `../internal-plugins/component-layout-creator`)\n    )\n  )\n  plugins.push(\n    processPlugin(\n      path.join(__dirname, `../internal-plugins/internal-data-bridge`)\n    )\n  )\n  plugins.push(\n    processPlugin(path.join(__dirname, `../internal-plugins/prod-404`))\n  )\n  plugins.push(\n    processPlugin(path.join(__dirname, `../internal-plugins/query-runner`))\n  )\n\n  // Add plugins from the site config.\n  if (config.plugins) {\n    config.plugins.forEach(plugin => {\n      plugins.push(processPlugin(plugin))\n    })\n  }\n\n  // Add the site's default \"plugin\" i.e. gatsby-x files in root of site.\n  plugins.push({\n    resolve: slash(process.cwd()),\n    id: `Plugin default-site-plugin`,\n    name: `default-site-plugin`,\n    version: createFileContentHash(process.cwd(), `gatsby-*`),\n    pluginOptions: {\n      plugins: [],\n    },\n  })\n\n  // Create a \"flattened\" array of plugins with all subplugins\n  // brought to the top-level. This simplifies running gatsby-* files\n  // for subplugins.\n  const flattenedPlugins = []\n  const extractPlugins = plugin => {\n    plugin.pluginOptions.plugins.forEach(subPlugin => {\n      flattenedPlugins.push(subPlugin)\n      extractPlugins(subPlugin)\n    })\n  }\n\n  plugins.forEach(plugin => {\n    flattenedPlugins.push(plugin)\n    extractPlugins(plugin)\n  })\n\n  // Validate plugins before saving. Plugins can only export known APIs. The known\n  // APIs that a plugin supports are saved along with the plugin in the store for\n  // easier filtering later. If there are bad exports (either typos, outdated, or\n  // plain incorrect), then we output a readable error & quit.\n  const apis = _.keys(nodeAPIs)\n  const apiToPlugins = apis.reduce((acc, value) => {\n    acc[value] = []\n    return acc\n  }, {})\n\n\n  const badExports = {\n    node: [],\n    browser: [],\n    ssr: [],\n  }\n\n  flattenedPlugins.forEach(plugin => {\n    plugin.nodeAPIs = []\n    plugin.browserAPIs = []\n    plugin.ssrAPIs = []\n\n    const gatsbyNode = resolvePluginModule(plugin, `gatsby-node`)\n    const gatsbyBrowser = resolvePluginModule(plugin, `gatsby-browser`)\n    const gatsbySSR = resolvePluginModule(plugin, `gatsby-ssr`)\n\n    // Discover which APIs this plugin implements and store an array against\n    // the plugin node itself *and* in an API to plugins map for faster lookups\n    // later.\n    if (gatsbyNode) {\n      const gatsbyNodeKeys = _.keys(gatsbyNode)\n      plugin.nodeAPIs = _.intersection(gatsbyNodeKeys, apis)\n      plugin.nodeAPIs.map(nodeAPI => apiToPlugins[nodeAPI].push(plugin.name))\n      badExports.node = getBadExports(plugin, gatsbyNodeKeys, apis) // Collate any bad exports\n    }\n\n    if (gatsbyBrowser) {\n      const gatsbyBrowserKeys = _.keys(gatsbyBrowser)\n      plugin.browserAPIs = _.intersection(gatsbyBrowserKeys, apis)\n      plugin.browserAPIs.map(browserAPI => apiToPlugins[browserAPI].push(plugin.name))\n      badExports.browser = getBadExports(plugin, gatsbyBrowserKeys, apis) // Collate any bad exports\n    }\n\n    if (gatsbySSR) {\n      const gatsbySSRKeys = _.keys(gatsbySSR)\n      plugin.ssrAPIs = _.intersection(gatsbySSRKeys, apis)\n      plugin.ssrAPIs.map(ssrAPI => apiToPlugins[ssrAPI].push(plugin.name))\n      badExports.ssr = getBadExports(plugin, gatsbySSRKeys, apis) // Collate any bad exports\n    }\n  })\n\n  // Output error messages for all bad exports\n  let bad = false\n  _.toPairs(badExports).forEach(bad => {\n    const [exportType, entries] = bad\n    if (entries.length > 0) {\n      bad = true\n      console.log(getBadExportsMessage(entries, exportType, apis))\n    }\n  })\n\n  if (bad) process.exit()\n\n  store.dispatch({\n    type: `SET_SITE_PLUGINS`,\n    payload: plugins,\n  })\n\n  store.dispatch({\n    type: `SET_SITE_FLATTENED_PLUGINS`,\n    payload: flattenedPlugins,\n  })\n\n  store.dispatch({\n    type: `SET_SITE_API_TO_PLUGINS`,\n    payload: apiToPlugins,\n  })\n\n  return flattenedPlugins\n}\n"]}